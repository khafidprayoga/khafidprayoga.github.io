{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/async-await-and-promise",
    "result": {"data":{"post":{"slug":"/async-await-and-promise","title":"Async/Await and Promise","date":"18.10.2021","tags":null,"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Async/Await and Promise\",\n  \"date\": \"2021-10-18T00:00:00.000Z\",\n  \"slug\": \"/async-await-and-promise\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Async/Await merupakan metode yang digunakan untuk menjalankan \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"piece of code\"), \"\\nsecara asinkronus, dalam artian kode baris tersebut tidak akan di eksekusi secara langsung,\\nsampai terjadi suatu trigger event tertentu.\\nMisalnya ketika anda mengkonsumsi API, data yang ditampilkan akan menunggu\\nstatus dan JSON response dari HTTP server.\"), mdx(\"p\", null, \"Async/Await merupakan syntactic sugar dari Promise. Didalam ilmu pemrograman komputer,\\nmaksudnya syntax tersebut digunakan untuk mempercantik cara penulisan kode dan\\nagar mudah dibaca. Agar semua orang bisa saling mengerti apa maksud dari potongan kode tersebut.\"), mdx(\"p\", null, \"Promise (janji) memiliki 3 kondisi yakni pending (antri), fulfilled (terpenuhi),\\ndan rejected (ditolak). Callbak parameter pada Promise umumnya adalah resolve dan reject.\"), mdx(\"p\", null, \"Jadi penerapan Promise mirip seperti kehidupan nyata, misalnya anda sedang membuat janji untuk\\nbertemuan bersama sahabat di kafe nanti malam. Dari kasus tersebut kita dapat mengambil\\nkesimpulan berikut:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pending => dia belum menerima pesan anda, misalnya paket datanya habis\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Fullfilled/Resolved => dia menerima ajakan anda, dan datang nanti malam\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Rejected => dia sedang sibuk, dan ada pekerjaan yang lebih penting\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Async/Await merupakan metode yang digunakan untuk menjalankan  piece of code \nsecara asinkronus, dalam artian kode baris tersebut tidak akanâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/async-await-and-promise","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}