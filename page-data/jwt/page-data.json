{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/jwt",
    "result": {"data":{"post":{"slug":"/jwt","title":"JWT (JSON Web Token)","date":"18.10.2021","tags":[{"name":"Security","slug":"security"},{"name":"NodeJS","slug":"node-js"},{"name":"JWT","slug":"jwt"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JWT (JSON Web Token)\",\n  \"date\": \"2021-10-18T00:00:00.000Z\",\n  \"slug\": \"/jwt\",\n  \"tags\": [\"Security\", \"NodeJS\", \"JWT\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Pendahuluan\"), mdx(\"p\", null, \"JSON Web Token (JWT) merupakan sebuah protokol standar (RFC 7519) yang mendefinisikan\\ncara yang sederhana, dan bebas untuk melakukan transmisi data antar pihak (client/server)\\nsecara aman menggunakan format data JSON.\"), mdx(\"p\", null, \"Karena data yang ditransmisikan memiliki sertifikat digital, dapat dienkripsi\\ndengan bantuan key-pair (public/private)\\nmenggunakan implementasi RSA, atau diverifikasi menggunakan algoritma HMAC.\"), mdx(\"p\", null, \"Penjelasan:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Sederhana => ukurannya minimal sehingga transmisinya cepat, dapat dikirim melalui URL, parameter POST, atau didalam HTTP Header.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"bebas => payload data bebas ditentukan informasinya\")), mdx(\"h2\", null, \"Implementasi\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Authentication -> saat ini sudah banyak yang menggunakan JWT sebagai token autentikasi,\\nkarena didalam token tersebut berisi data yang dapat digunakan untuk mengakses layanan API,\\nmisalnya endpoint dashboard. JWT biasanya diadopsi dengan skema authentikasi SSO (Single Sign On)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Information Exchange -> cocok untuk mentransmisikan data antar pihak, karena datanya dapat\\ndiverifikasi, ditandatangani digital, dan dapat diketahui jika isi suatu informasi telah diubah\\noleh pihak ketiga, karena JWT melakukan checksum calculation terhadap header dan payload.\")), mdx(\"h2\", null, \"Struktur Token\"), mdx(\"p\", null, \"Format data xxxxx.yyyyy.zzzzz\"), mdx(\"p\", null, \"Header, terdapat 2 parameter implementasi algoritma, dan type.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"alg\\\": \\\"HS256\\\",\\n  \\\"typ\\\": \\\"JWT\\\"\\n}\\n\")), mdx(\"p\", null, \"Payload -> berisi claim, yakni penjelasan token tersebut/data yang ditransmisikan\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"sub\\\": \\\"1234567890\\\",\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"admin\\\": true\\n}\\n\")), mdx(\"p\", null, \"Signature -> berisi tanda tangan digital yang digunakan untuk memverifikasi header,payload,secret key, dan algoritma yang digunakan.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"HMACSHA256(\\n  base64UrlEncode(header) + \\\".\\\" +\\n  base64UrlEncode(payload),\\n  secret)\\n\")), mdx(\"p\", null, \"Semua komponen diatas tersebut akan ditulis, kemudian di encode menggunakan base64 string.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://auth0.com/learn/json-web-tokens/\"\n  }, \"0Auth\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jwt.io/introduction/\"\n  }, \"JWT.io\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Pendahuluan JSON Web Token (JWT) merupakan sebuah protokol standar (RFC 7519) yang mendefinisikan\ncara yang sederhana, dan bebas untukâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/jwt","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}